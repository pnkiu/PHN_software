package view;

import controller.StaffController;
import model.StaffModel;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

public class StaffPanel extends JPanel {
    private StaffController controller;
    private DefaultTableModel tableModel;
    private JTable table;
    private JTextField searchField;
    private JComboBox<String> searchTypeComboBox;
    private JButton btnEdit;
    private JButton btnReload;
    private JButton btnSearch;
    private JButton btnClearSearch;

    // Constructor v·ªõi controller
    public StaffPanel(StaffController controller) {
        if (controller == null) {
            throw new IllegalArgumentException("StaffController cannot be null");
        }
    }
    public StaffPanel() {
        this.controller = new StaffController();
        this.initComponents();
        loadDataFromDatabase();

    }


    public void initComponents() {
        setLayout(new BorderLayout(8, 8));
        setBorder(new EmptyBorder(10, 10, 10, 10));

        add(createSectionTitle(), BorderLayout.NORTH);
        add(createToolbarPanel(), BorderLayout.PAGE_START);
        add(createTablePanel(), BorderLayout.CENTER);
    }

    // ============================ TITLE SECTION ============================
    private JLabel createSectionTitle() {
        JLabel titleLabel = new JLabel("Qu·∫£n L√Ω Nh√¢n Vi√™n");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 18));
        titleLabel.setBorder(new EmptyBorder(0, 0, 10, 0));
        return titleLabel;
    }

    // ============================ TOOLBAR SECTION ============================
    private JPanel createToolbarPanel() {
        JPanel toolbarPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 8));
        toolbarPanel.setBorder(new EmptyBorder(0, 0, 10, 0));

        // T·∫°o c√°c n√∫t ch·ª©c nƒÉng
        JButton btnAdd = createToolbarButton("‚ûï Th√™m Nh√¢n Vi√™n");
        btnEdit = createToolbarButton("üìù S·ª≠a");
        JButton btnDelete = createToolbarButton("üóëÔ∏è X√≥a");
        btnReload = createToolbarButton("üîÑ T·∫£i l·∫°i");

        // T·∫°o √¥ t√¨m ki·∫øm v√† combobox lo·∫°i t√¨m ki·∫øm
        JLabel searchLabel = new JLabel("üîç T√¨m ki·∫øm:");

        // Combobox ch·ªçn lo·∫°i t√¨m ki·∫øm
        String[] searchTypes = {"T·∫•t c·∫£", "M√£ nh√¢n vi√™n", "T√™n nh√¢n vi√™n", "S·ªë ƒëi·ªán tho·∫°i"};
        searchTypeComboBox = new JComboBox<>(searchTypes);
        searchTypeComboBox.setPreferredSize(new Dimension(120, 30));
        searchTypeComboBox.setFont(new Font("Segoe UI", Font.PLAIN, 12));

        // √î nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm
        searchField = new JTextField(20);
        searchField.setPreferredSize(new Dimension(200, 30));

        // N√∫t t√¨m ki·∫øm
        btnSearch = createToolbarButton("üîé T√¨m");
        btnClearSearch = createToolbarButton("‚ùå X√≥a t√¨m ki·∫øm");

        // Th√™m components v√†o toolbar
        toolbarPanel.add(btnAdd);
        toolbarPanel.add(btnEdit);
        toolbarPanel.add(btnDelete);
        toolbarPanel.add(btnReload);
        toolbarPanel.add(Box.createHorizontalStrut(20)); // Kho·∫£ng c√°ch
        toolbarPanel.add(searchLabel);
        toolbarPanel.add(searchTypeComboBox);
        toolbarPanel.add(searchField);
        toolbarPanel.add(btnSearch);
        toolbarPanel.add(btnClearSearch);

        // Th√™m s·ª± ki·ªán cho c√°c n√∫t
        setupEventListeners();

        return toolbarPanel;
    }

    private void setupEventListeners() {
        // Th√™m s·ª± ki·ªán cho n√∫t S·ª≠a
        btnEdit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openEditDialog();
            }
        });

        // Th√™m s·ª± ki·ªán cho n√∫t T·∫£i l·∫°i
        btnReload.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                refreshData();
            }
        });

        // Th√™m s·ª± ki·ªán cho n√∫t T√¨m ki·∫øm
        btnSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                performSearch();
            }
        });

        // Th√™m s·ª± ki·ªán cho n√∫t X√≥a t√¨m ki·∫øm
        btnClearSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearSearch();
            }
        });

        // Th√™m s·ª± ki·ªán Enter cho √¥ t√¨m ki·∫øm
        searchField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                performSearch();
            }
        });
    }

    private JButton createToolbarButton(String text) {
        JButton button = new JButton(text);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        return button;
    }

    // ============================ SEARCH METHODS ============================
    private void performSearch() {
        String keyword = searchField.getText().trim();
        String searchType = (String) searchTypeComboBox.getSelectedItem();

        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm",
                    "Th√¥ng b√°o",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            List<StaffModel> searchResults = null;

            switch (searchType) {
                case "T·∫•t c·∫£":
                    searchResults = controller.searchAllFields(keyword);
                    break;
                case "M√£ nh√¢n vi√™n":
                    searchResults = controller.searchByMaNV(keyword);
                    break;
                case "T√™n nh√¢n vi√™n":
                    searchResults = controller.searchByTenNV(keyword);
                    break;
                case "S·ªë ƒëi·ªán tho·∫°i":
                    searchResults = controller.searchBySDT(keyword);
                    break;
            }

            if (searchResults != null && !searchResults.isEmpty()) {
                displaySearchResults(searchResults);
                showSearchResultMessage(searchResults.size(), keyword, searchType);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o",
                        "Th√¥ng b√°o",
                        JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "L·ªói khi t√¨m ki·∫øm: " + e.getMessage(),
                    "L·ªói",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void displaySearchResults(List<StaffModel> staffList) {
        tableModel.setRowCount(0); // X√≥a d·ªØ li·ªáu c≈©

        for (StaffModel staff : staffList) {
            Object[] rowData = {
                    staff.getMaNV(),
                    staff.getTenNV(),
                    formatCurrency(staff.getLuongNV()),
                    staff.getSdtNV(),
                    getChucVuText(staff.getChucVu()),
                    staff.getTenDangNhap(),
                    "‚úèÔ∏è S·ª≠a"
            };
            tableModel.addRow(rowData);
        }
    }

    private void showSearchResultMessage(int resultCount, String keyword, String searchType) {
        String message = String.format("T√¨m th·∫•y %d k·∫øt qu·∫£ cho '%s' trong %s",
                resultCount, keyword, searchType.toLowerCase());
        System.out.println(message);
    }

    private void clearSearch() {
        searchField.setText("");
        searchTypeComboBox.setSelectedIndex(0);
        refreshData();
    }

    // ============================ TABLE SECTION ============================
    private JScrollPane createTablePanel() {
        // T·∫°o model cho b·∫£ng
        String[] columns = {"M√£ NV", "T√™n NV", "L∆∞∆°ng", "S·ªë ƒëi·ªán tho·∫°i", "Ch·ª©c v·ª•", "T√™n ƒëƒÉng nh·∫≠p", "Thao t√°c"};
        tableModel = createTableModel(columns);

        // T·∫°o b·∫£ng
        table = createTable(tableModel);

        // T·∫°o scroll pane cho b·∫£ng
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200)));

        return scrollPane;
    }

    private DefaultTableModel createTableModel(String[] columns) {
        return new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Ch·ªâ cho ph√©p ch·ªânh s·ª≠a c·ªôt "Thao t√°c"
                return column == 6;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                // X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu cho t·ª´ng c·ªôt
                if (columnIndex == 0) return Integer.class; // M√£ NV l√† s·ªë
                return String.class;
            }
        };
    }

    // Ph∆∞∆°ng th·ª©c t·∫£i d·ªØ li·ªáu t·ª´ database
    private void loadDataFromDatabase() {
        try {
            System.out.println("üîÑ ƒêang t·∫£i d·ªØ li·ªáu nh√¢n vi√™n t·ª´ database...");
            List<StaffModel> staffList = controller.getStaffList();

            tableModel.setRowCount(0); // X√≥a d·ªØ li·ªáu c≈©

            if (staffList != null && !staffList.isEmpty()) {
                for (StaffModel staff : staffList) {
                    Object[] rowData = {
                            staff.getMaNV(),
                            staff.getTenNV(),
                            formatCurrency(staff.getLuongNV()),
                            staff.getSdtNV(),
                            getChucVuText(staff.getChucVu()),
                            staff.getTenDangNhap(),
                            "‚úèÔ∏è S·ª≠a"
                    };
                    tableModel.addRow(rowData);
                }
                System.out.println("‚úÖ ƒê√£ t·∫£i " + staffList.size() + " nh√¢n vi√™n t·ª´ database");
            } else {
                System.out.println("‚ÑπÔ∏è Kh√¥ng c√≥ nh√¢n vi√™n n√†o trong database");
                // Kh√¥ng hi·ªÉn th·ªã th√¥ng b√°o popup ƒë·ªÉ tr√°nh l√†m phi·ªÅn ng∆∞·ªùi d√πng
            }

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ database: " + e.getMessage());
            JOptionPane.showMessageDialog(this,
                    "L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ database: " + e.getMessage(),
                    "L·ªói",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private JTable createTable(DefaultTableModel model) {
        JTable table = new JTable(model);

        // Thi·∫øt l·∫≠p thu·ªôc t√≠nh cho b·∫£ng
        table.setRowHeight(35);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        table.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 13));
        table.getTableHeader().setBackground(new Color(240, 240, 240));
        table.getTableHeader().setForeground(Color.BLACK);

        // Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
        table.getColumnModel().getColumn(0).setPreferredWidth(80);  // M√£ NV
        table.getColumnModel().getColumn(1).setPreferredWidth(150); // T√™n NV
        table.getColumnModel().getColumn(2).setPreferredWidth(120); // L∆∞∆°ng
        table.getColumnModel().getColumn(3).setPreferredWidth(100); // S·ªë ƒëi·ªán tho·∫°i
        table.getColumnModel().getColumn(4).setPreferredWidth(80);  // Ch·ª©c v·ª•
        table.getColumnModel().getColumn(5).setPreferredWidth(100); // T√™n ƒëƒÉng nh·∫≠p
        table.getColumnModel().getColumn(6).setPreferredWidth(70);  // Thao t√°c

        // CƒÉn gi·ªØa n·ªôi dung m·ªôt s·ªë c·ªôt
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); // M√£ NV
        table.getColumnModel().getColumn(4).setCellRenderer(centerRenderer); // Ch·ª©c v·ª•
        table.getColumnModel().getColumn(6).setCellRenderer(centerRenderer); // Thao t√°c

        // Th√™m s·ª± ki·ªán cho c·ªôt "Thao t√°c"
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int row = table.rowAtPoint(evt.getPoint());
                int col = table.columnAtPoint(evt.getPoint());

                if (row >= 0 && col == 6) { // C·ªôt "Thao t√°c"
                    openEditDialogForRow(row);
                }
            }
        });

        return table;
    }

    // ============================ EDIT DIALOG METHODS ============================
    private void openEditDialog() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                    "Vui l√≤ng ch·ªçn nh√¢n vi√™n c·∫ßn s·ª≠a",
                    "Th√¥ng b√°o",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        openEditDialogForRow(selectedRow);
    }

    private void openEditDialogForRow(int row) {
        // L·∫•y m√£ nh√¢n vi√™n t·ª´ h√†ng ƒë∆∞·ª£c ch·ªçn
        int maNV = (int) tableModel.getValueAt(row, 0);

        // T·∫°o JDialog
        JDialog editDialog = new JDialog((Frame) SwingUtilities.getWindowAncestor(this),
                "S·ª≠a Th√¥ng Tin Nh√¢n Vi√™n",
                true);
        editDialog.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        editDialog.setSize(600, 500);
        editDialog.setLocationRelativeTo(this);

        // S·ª≠ d·ª•ng StaffEditDialog
        try {
            StaffEditDialog staffEditDialog = new StaffEditDialog(editDialog, controller, maNV);
            editDialog.setContentPane(staffEditDialog);

            // Hi·ªÉn th·ªã dialog
            editDialog.setVisible(true);

            // Sau khi dialog ƒë√≥ng, refresh d·ªØ li·ªáu
            refreshData();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "L·ªói khi m·ªü form s·ª≠a: " + e.getMessage(),
                    "L·ªói",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    // ============================ PUBLIC METHODS ============================
    public void refreshData() {
        loadDataFromDatabase();
    }

    public JTable getTable() {
        return table;
    }

    public JButton getBtnSua() {
        return btnEdit;
    }

    // ============================ UTILITY METHODS ============================

    // Ph∆∞∆°ng th·ª©c ƒë·ªãnh d·∫°ng ti·ªÅn t·ªá
    private String formatCurrency(long amount) {
        return String.format("‚Ç´ %,d", amount);
    }

    // Ph∆∞∆°ng th·ª©c chuy·ªÉn ƒë·ªïi ch·ª©c v·ª• t·ª´ s·ªë sang text - ƒê√É S·ª¨A
    private String getChucVuText(int chucVu) {
        return chucVu == 1 ? "Qu·∫£n tr·ªã vi√™n" : "Nh√¢n vi√™n"; // 1 = Qu·∫£n l√Ω, 0 = Nh√¢n vi√™n
    }

    // Ph∆∞∆°ng th·ª©c ki·ªÉm tra tr·∫°ng th√°i
    public boolean isReady() {
        return controller != null && controller.isReady();
    }
}