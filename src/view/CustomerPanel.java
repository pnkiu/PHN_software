package view;

import controller.CustomerController;
import model.CustomerModel;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.List;

public class CustomerPanel extends JPanel {
    private CustomerController controller;
    private DefaultTableModel tableModel;
    private JTable table;
    private JTextField searchField;
    private JComboBox<String> searchTypeComboBox;
    private JButton btnEdit;
    private JButton btnReload;
    private JButton btnSearch;
    private JButton btnClearSearch;

    public CustomerPanel() throws SQLException {
        this.controller = new CustomerController();
        this.initComponents();
        loadDataFromDatabase();
    }

    public void initComponents() {
        setLayout(new BorderLayout(8, 8));
        setBorder(new EmptyBorder(10, 10, 10, 10));

        add(createSectionTitle(), BorderLayout.NORTH);
        add(createToolbarPanel(), BorderLayout.PAGE_START);
        add(createTablePanel(), BorderLayout.CENTER);
    }

    // ============================ TITLE SECTION ============================
    private JLabel createSectionTitle() {
        JLabel titleLabel = new JLabel("Qu·∫£n L√Ω Kh√°ch H√†ng");
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 18));
        titleLabel.setBorder(new EmptyBorder(0, 0, 10, 0));
        return titleLabel;
    }

    // ============================ TOOLBAR SECTION ============================
    private JPanel createToolbarPanel() {
        JPanel toolbarPanel = new JPanel(new FlowLayout(FlowLayout.LEFT, 8, 8));
        toolbarPanel.setBorder(new EmptyBorder(0, 0, 10, 0));

        // T·∫°o c√°c n√∫t ch·ª©c nƒÉng
        JButton btnAdd = createToolbarButton("‚ûï Th√™m Kh√°ch H√†ng");
        btnEdit = createToolbarButton("üìù S·ª≠a");
        JButton btnDelete = createToolbarButton("üóëÔ∏è X√≥a");
        btnReload = createToolbarButton("üîÑ T·∫£i l·∫°i");

        // T·∫°o √¥ t√¨m ki·∫øm v√† combobox lo·∫°i t√¨m ki·∫øm
        JLabel searchLabel = new JLabel("üîç T√¨m ki·∫øm:");

        // Combobox ch·ªçn lo·∫°i t√¨m ki·∫øm
        String[] searchTypes = {"T·∫•t c·∫£", "M√£ KH", "T√™n KH", "S·ªë ƒëi·ªán tho·∫°i", "ƒê·ªãa ch·ªâ"};
        searchTypeComboBox = new JComboBox<>(searchTypes);
        searchTypeComboBox.setPreferredSize(new Dimension(120, 30));
        searchTypeComboBox.setFont(new Font("Segoe UI", Font.PLAIN, 12));

        // √î nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm
        searchField = new JTextField(20);
        searchField.setPreferredSize(new Dimension(200, 30));

        // N√∫t t√¨m ki·∫øm
        btnSearch = createToolbarButton("üîé T√¨m");
        btnClearSearch = createToolbarButton("‚ùå X√≥a t√¨m ki·∫øm");

        // Th√™m components v√†o toolbar
        toolbarPanel.add(btnAdd);
        toolbarPanel.add(btnEdit);
        toolbarPanel.add(btnDelete);
        toolbarPanel.add(btnReload);
        toolbarPanel.add(Box.createHorizontalStrut(20)); // Kho·∫£ng c√°ch
        toolbarPanel.add(searchLabel);
        toolbarPanel.add(searchTypeComboBox);
        toolbarPanel.add(searchField);
        toolbarPanel.add(btnSearch);
        toolbarPanel.add(btnClearSearch);

        // Th√™m s·ª± ki·ªán cho c√°c n√∫t
        setupEventListeners(btnAdd, btnDelete);

        return toolbarPanel;
    }

    private void setupEventListeners(JButton btnAdd, JButton btnDelete) {
        // S·ª± ki·ªán n√∫t Th√™m
        btnAdd.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openAddDialog();
            }
        });

        // S·ª± ki·ªán n√∫t S·ª≠a
        btnEdit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                openEditDialog();
            }
        });

        // S·ª± ki·ªán n√∫t X√≥a
        btnDelete.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                deleteSelectedCustomer();
            }
        });

        // S·ª± ki·ªán n√∫t T·∫£i l·∫°i
        btnReload.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                refreshData();
            }
        });

        // S·ª± ki·ªán n√∫t T√¨m ki·∫øm
        btnSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                performSearch();
            }
        });

        // S·ª± ki·ªán n√∫t X√≥a t√¨m ki·∫øm
        btnClearSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                clearSearch();
            }
        });

        // S·ª± ki·ªán Enter cho √¥ t√¨m ki·∫øm
        searchField.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                performSearch();
            }
        });
    }

    private JButton createToolbarButton(String text) {
        JButton button = new JButton(text);
        button.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        button.setFocusPainted(false);
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        return button;
    }

    // ============================ DIALOG METHODS ============================
    private void openAddDialog() {
        CustomerDialog.showAddDialog(this, controller, new CustomerDialog.OnCustomerSavedListener() {
            @Override
            public void onCustomerSaved() {
                refreshData();
                JOptionPane.showMessageDialog(CustomerPanel.this,
                        "Th√™m kh√°ch h√†ng th√†nh c√¥ng!",
                        "Th√†nh c√¥ng",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        });
    }

    private void openEditDialog() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                    "Vui l√≤ng ch·ªçn kh√°ch h√†ng c·∫ßn s·ª≠a",
                    "Th√¥ng b√°o",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }
        openEditDialogForRow(selectedRow);
    }

    private void openEditDialogForRow(int row) {
        // L·∫•y m√£ kh√°ch h√†ng t·ª´ h√†ng ƒë∆∞·ª£c ch·ªçn
        int maKH = (int) tableModel.getValueAt(row, 0);
        CustomerModel customer = controller.getCustomerByMaKH(maKH);

        if (customer != null) {
            CustomerDialog.showEditDialog(this, controller, customer, new CustomerDialog.OnCustomerSavedListener() {
                @Override
                public void onCustomerSaved() {
                    refreshData();
                    JOptionPane.showMessageDialog(CustomerPanel.this,
                            "C·∫≠p nh·∫≠t kh√°ch h√†ng th√†nh c√¥ng!",
                            "Th√†nh c√¥ng",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            });
        } else {
            JOptionPane.showMessageDialog(this,
                    "Kh√¥ng t√¨m th·∫•y th√¥ng tin kh√°ch h√†ng",
                    "L·ªói",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    private void deleteSelectedCustomer() {
        int selectedRow = table.getSelectedRow();
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this,
                    "Vui l√≤ng ch·ªçn kh√°ch h√†ng c·∫ßn x√≥a",
                    "Th√¥ng b√°o",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        int maKH = (int) tableModel.getValueAt(selectedRow, 0);
        String tenKH = (String) tableModel.getValueAt(selectedRow, 1);

        int confirm = JOptionPane.showConfirmDialog(this,
                "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√°ch h√†ng: " + tenKH + "?",
                "X√°c nh·∫≠n x√≥a",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.WARNING_MESSAGE);

        if (confirm == JOptionPane.YES_OPTION) {
            try {
                boolean success = controller.deleteCustomer(maKH);
                if (success) {
                    JOptionPane.showMessageDialog(this,
                            "X√≥a kh√°ch h√†ng th√†nh c√¥ng!",
                            "Th√†nh c√¥ng",
                            JOptionPane.INFORMATION_MESSAGE);
                    refreshData();
                } else {
                    JOptionPane.showMessageDialog(this,
                            "C√≥ l·ªói x·∫£y ra khi x√≥a kh√°ch h√†ng",
                            "L·ªói",
                            JOptionPane.ERROR_MESSAGE);
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this,
                        "L·ªói khi x√≥a kh√°ch h√†ng: " + e.getMessage(),
                        "L·ªói",
                        JOptionPane.ERROR_MESSAGE);
                e.printStackTrace();
            }
        }
    }

    // ============================ SEARCH METHODS ============================
    private void performSearch() {
        String keyword = searchField.getText().trim();
        String searchType = (String) searchTypeComboBox.getSelectedItem();

        if (keyword.isEmpty()) {
            JOptionPane.showMessageDialog(this,
                    "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm",
                    "Th√¥ng b√°o",
                    JOptionPane.WARNING_MESSAGE);
            return;
        }

        try {
            List<CustomerModel> searchResults = null;

            switch (searchType) {
                case "T·∫•t c·∫£":
                    searchResults = controller.searchAllFields(keyword);
                    break;
                case "M√£ KH":
                    searchResults = controller.searchByMaKH(keyword);
                    break;
                case "T√™n KH":
                    searchResults = controller.searchByTenKH(keyword);
                    break;
                case "S·ªë ƒëi·ªán tho·∫°i":
                    searchResults = controller.searchBySDT(keyword);
                    break;
                case "ƒê·ªãa ch·ªâ":
                    searchResults = controller.searchByDiaChi(keyword);
                    break;
            }

            if (searchResults != null && !searchResults.isEmpty()) {
                displaySearchResults(searchResults);
                showSearchResultMessage(searchResults.size(), keyword, searchType);
            } else {
                JOptionPane.showMessageDialog(this,
                        "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ n√†o cho t·ª´ kh√≥a: '" + keyword + "'",
                        "Th√¥ng b√°o",
                        JOptionPane.INFORMATION_MESSAGE);
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this,
                    "L·ªói khi t√¨m ki·∫øm: " + e.getMessage(),
                    "L·ªói",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }
    }

    private void displaySearchResults(List<CustomerModel> customerList) {
        tableModel.setRowCount(0); // X√≥a d·ªØ li·ªáu c≈©

        for (CustomerModel customer : customerList) {
            Object[] rowData = {
                    customer.getMaKH(),
                    customer.getTenKH(),
                    customer.getDckH(),
                    customer.getSdtKH(),
                    formatCurrency(customer.getTongChiTieu()),
                    customer.getSoLanMua()
            };
            tableModel.addRow(rowData);
        }
    }

    private void showSearchResultMessage(int resultCount, String keyword, String searchType) {
        String message = String.format("T√¨m th·∫•y %d k·∫øt qu·∫£ cho '%s' trong %s",
                resultCount, keyword, searchType.toLowerCase());
        System.out.println(message);
    }

    private void clearSearch() {
        searchField.setText("");
        searchTypeComboBox.setSelectedIndex(0);
        refreshData();
    }

    // ============================ TABLE SECTION ============================
    private JScrollPane createTablePanel() {
        // T·∫°o model cho b·∫£ng - ƒê√É B·ªé C·ªòT THAO T√ÅC
        String[] columns = {"M√£ KH", "T√™n Kh√°ch H√†ng", "ƒê·ªãa Ch·ªâ", "S·ªë ƒêi·ªán Tho·∫°i", "T·ªïng Chi Ti√™u", "S·ªë L·∫ßn Mua"};
        tableModel = createTableModel(columns);

        // T·∫°o b·∫£ng
        table = createTable(tableModel);

        // T·∫°o scroll pane cho b·∫£ng
        JScrollPane scrollPane = new JScrollPane(table);
        scrollPane.setBorder(BorderFactory.createLineBorder(new Color(200, 200, 200)));

        return scrollPane;
    }

    private DefaultTableModel createTableModel(String[] columns) {
        return new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Kh√¥ng cho ph√©p ch·ªânh s·ª≠a tr·ª±c ti·∫øp tr√™n b·∫£ng
                return false;
            }

            @Override
            public Class<?> getColumnClass(int columnIndex) {
                // X√°c ƒë·ªãnh ki·ªÉu d·ªØ li·ªáu cho t·ª´ng c·ªôt
                switch (columnIndex) {
                    case 0: return Integer.class; // M√£ KH
                    case 4: return String.class;  // T·ªïng Chi Ti√™u (ƒë√£ format)
                    case 5: return Integer.class; // S·ªë L·∫ßn Mua
                    default: return String.class;
                }
            }
        };
    }

    // Ph∆∞∆°ng th·ª©c t·∫£i d·ªØ li·ªáu t·ª´ database
    private void loadDataFromDatabase() {
        try {
            System.out.println("üîÑ ƒêang t·∫£i d·ªØ li·ªáu kh√°ch h√†ng t·ª´ database...");
            List<CustomerModel> customerList = controller.getCustomerList();

            tableModel.setRowCount(0); // X√≥a d·ªØ li·ªáu c≈©

            if (customerList != null && !customerList.isEmpty()) {
                for (CustomerModel customer : customerList) {
                    Object[] rowData = {
                            customer.getMaKH(),
                            customer.getTenKH(),
                            customer.getDckH(),
                            customer.getSdtKH(),
                            formatCurrency(customer.getTongChiTieu()),
                            customer.getSoLanMua()
                    };
                    tableModel.addRow(rowData);
                }
                System.out.println("‚úÖ ƒê√£ t·∫£i " + customerList.size() + " kh√°ch h√†ng t·ª´ database");
            } else {
                System.out.println("‚ÑπÔ∏è Kh√¥ng c√≥ kh√°ch h√†ng n√†o trong database");
                // Th√™m h√†ng th√¥ng b√°o n·∫øu kh√¥ng c√≥ d·ªØ li·ªáu
                tableModel.addRow(new Object[]{"", "Kh√¥ng c√≥ d·ªØ li·ªáu", "", "", "", ""});
            }

        } catch (Exception e) {
            System.out.println("‚ùå L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ database: " + e.getMessage());
            JOptionPane.showMessageDialog(this,
                    "L·ªói khi t·∫£i d·ªØ li·ªáu t·ª´ database: " + e.getMessage(),
                    "L·ªói",
                    JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();

            // Th√™m h√†ng th√¥ng b√°o l·ªói
            tableModel.addRow(new Object[]{"", "L·ªói khi t·∫£i d·ªØ li·ªáu", "", "", "", ""});
        }
    }

    private JTable createTable(DefaultTableModel model) {
        JTable table = new JTable(model);

        // Thi·∫øt l·∫≠p thu·ªôc t√≠nh cho b·∫£ng
        table.setRowHeight(35);
        table.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        table.setFont(new Font("Segoe UI", Font.PLAIN, 12));
        table.getTableHeader().setFont(new Font("Segoe UI", Font.BOLD, 13));
        table.getTableHeader().setBackground(new Color(240, 240, 240));
        table.getTableHeader().setForeground(Color.BLACK);
        table.setSelectionBackground(new Color(220, 240, 255));
        table.setSelectionForeground(Color.BLACK);

        // Thi·∫øt l·∫≠p ƒë·ªô r·ªông c·ªôt
        table.getColumnModel().getColumn(0).setPreferredWidth(80);  // M√£ KH
        table.getColumnModel().getColumn(1).setPreferredWidth(150); // T√™n KH
        table.getColumnModel().getColumn(2).setPreferredWidth(250); // ƒê·ªãa ch·ªâ
        table.getColumnModel().getColumn(3).setPreferredWidth(120); // S·ªë ƒëi·ªán tho·∫°i
        table.getColumnModel().getColumn(4).setPreferredWidth(120); // T·ªïng Chi Ti√™u
        table.getColumnModel().getColumn(5).setPreferredWidth(100); // S·ªë L·∫ßn Mua

        // CƒÉn gi·ªØa n·ªôi dung m·ªôt s·ªë c·ªôt
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        table.getColumnModel().getColumn(0).setCellRenderer(centerRenderer); // M√£ KH
        table.getColumnModel().getColumn(4).setCellRenderer(centerRenderer); // T·ªïng Chi Ti√™u
        table.getColumnModel().getColumn(5).setCellRenderer(centerRenderer); // S·ªë L·∫ßn Mua

        // CƒÉn tr√°i cho c·ªôt t√™n v√† ƒë·ªãa ch·ªâ
        DefaultTableCellRenderer leftRenderer = new DefaultTableCellRenderer();
        leftRenderer.setHorizontalAlignment(JLabel.LEFT);
        table.getColumnModel().getColumn(1).setCellRenderer(leftRenderer); // T√™n KH
        table.getColumnModel().getColumn(2).setCellRenderer(leftRenderer); // ƒê·ªãa ch·ªâ
        table.getColumnModel().getColumn(3).setCellRenderer(leftRenderer); // S·ªë ƒëi·ªán tho·∫°i

        // Double click ƒë·ªÉ s·ª≠a tr√™n b·∫•t k·ª≥ c·ªôt n√†o
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                if (evt.getClickCount() == 2) {
                    int row = table.rowAtPoint(evt.getPoint());
                    if (row >= 0) {
                        openEditDialogForRow(row);
                    }
                }
            }
        });

        return table;
    }

    // ============================ UTILITY METHODS ============================
    private String formatCurrency(long amount) {
        return String.format("%,d VND", amount);
    }

    // ============================ PUBLIC METHODS ============================
    public void refreshData() {
        loadDataFromDatabase();
    }

    public JTable getTable() {
        return table;
    }

    public JButton getBtnEdit() {
        return btnEdit;
    }

    public boolean isReady() {
        return controller != null && controller.isReady();
    }

    // Ph∆∞∆°ng th·ª©c l·∫•y controller (n·∫øu c·∫ßn)
    public CustomerController getController() {
        return controller;
    }

    // Ph∆∞∆°ng th·ª©c hi·ªÉn th·ªã th√¥ng b√°o
    public void showMessage(String message, String title, int messageType) {
        JOptionPane.showMessageDialog(this, message, title, messageType);
    }
}